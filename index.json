{
  "api/Fast.Activator.FastActivator.html": {
    "href": "api/Fast.Activator.FastActivator.html",
    "title": "Class FastActivator | FastActivator API Reference",
    "keywords": "Class FastActivator Namespace Fast.Activator Assembly Fast.Activator.dll Fast activator static class public static class FastActivator Inheritance object FastActivator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateInstance(Type) Creates an instance. public static object CreateInstance(Type type) Parameters type Type The type. Returns object The object if it can be created, null otherwise. CreateInstance(Type, params object[]) Creates an instance. public static object CreateInstance(Type type, params object[] args) Parameters type Type The type. args object[] The arguments. Returns object The object if it can be created, null otherwise. CreateInstance<TClass>() Creates an instance of the class. public static TClass CreateInstance<TClass>() Returns TClass The instance created. Type Parameters TClass The type of the class. CreateInstance<TClass>(params object[]) Creates an instance of the class. public static TClass CreateInstance<TClass>(params object[] args) Parameters args object[] The arguments. Returns TClass The instance created. Type Parameters TClass The type of the class."
  },
  "api/Fast.Activator.Utils.Constructor.html": {
    "href": "api/Fast.Activator.Utils.Constructor.html",
    "title": "Class Constructor | FastActivator API Reference",
    "keywords": "Class Constructor Namespace Fast.Activator.Utils Assembly Fast.Activator.dll Constructor public class Constructor Inheritance object Constructor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Constructor(ConstructorDelegate) Initializes a new instance of the Constructor class. public Constructor(ConstructorDelegate @delegate) Parameters delegate ConstructorDelegate The delegate. Constructor(ConstructorInfo, ParameterInfo[]) Initializes a new instance of the Constructor class. public Constructor(ConstructorInfo constructor, ParameterInfo[] parameters) Parameters constructor ConstructorInfo The constructor. parameters ParameterInfo[] The parameters. Exceptions ArgumentNullException constructor Properties ParameterLength Gets the size of the parameter. public int ParameterLength { get; } Property Value int The size of the parameter. Methods CreateInstance(object[]) Create an instance. public object CreateInstance(object[] args) Parameters args object[] The arguments. Returns object The new object IsMatch(object[]) Determines whether the specified arguments is a match. public bool IsMatch(object[] args) Parameters args object[] The arguments. Returns bool true if the specified arguments is a match; otherwise, false."
  },
  "api/Fast.Activator.Utils.ConstructorDelegate.html": {
    "href": "api/Fast.Activator.Utils.ConstructorDelegate.html",
    "title": "Delegate ConstructorDelegate | FastActivator API Reference",
    "keywords": "Delegate ConstructorDelegate Namespace Fast.Activator.Utils Assembly Fast.Activator.dll Constructor delegate public delegate object ConstructorDelegate(params object[] args) Parameters args object[] The arguments. Returns object The object"
  },
  "api/Fast.Activator.Utils.ConstructorList.html": {
    "href": "api/Fast.Activator.Utils.ConstructorList.html",
    "title": "Class ConstructorList | FastActivator API Reference",
    "keywords": "Class ConstructorList Namespace Fast.Activator.Utils Assembly Fast.Activator.dll Constructor list public class ConstructorList Inheritance object ConstructorList Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConstructorList(Type, int) Initializes a new instance of the ConstructorList class. public ConstructorList(Type type, int hashCode) Parameters type Type The type. hashCode int The hash code. Methods CreateInstance() Creates an instance. public object CreateInstance() Returns object The instance created. CreateInstance(object[]) Creates an instance. public object CreateInstance(object[] args) Parameters args object[] The arguments. Returns object The instance created."
  },
  "api/Fast.Activator.Utils.html": {
    "href": "api/Fast.Activator.Utils.html",
    "title": "Namespace Fast.Activator.Utils | FastActivator API Reference",
    "keywords": "Namespace Fast.Activator.Utils Classes Constructor Constructor ConstructorList Constructor list Delegates ConstructorDelegate Constructor delegate"
  },
  "api/Fast.Activator.html": {
    "href": "api/Fast.Activator.html",
    "title": "Namespace Fast.Activator | FastActivator API Reference",
    "keywords": "Namespace Fast.Activator Classes FastActivator Fast activator static class"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | FastActivator API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | FastActivator API Reference",
    "keywords": "Code namespace FastActivator.Example { /// <summary> /// Test class used to demonstrate FastActivator /// </summary> public class TestClass { /// <summary> /// Initializes a new instance of the <see cref=\"TestClass\"/> class. /// </summary> public TestClass() { System.Console.WriteLine(\"I was created\"); } /// <summary> /// Initializes a new instance of the <see cref=\"TestClass\"/> class. /// </summary> /// <param name=\"test\">The test string.</param> public TestClass(string test) { System.Console.WriteLine(\"I was created with a string: {0}\", test); } } /// <summary> /// Main program /// </summary> internal static class Program { /// <summary> /// Defines the entry point of the application. /// </summary> /// <param name=\"args\">The arguments.</param> private static void Main(string[] args) { // Create an object using the default constructor var MyObject = Fast.Activator.FastActivator.CreateInstance<TestClass>(); // Create an object using the constructor with a string parameter var MyObject2 = Fast.Activator.FastActivator.CreateInstance<TestClass>(\"Hello World\"); } } } Output I was created I was created with a string: Hello World"
  },
  "articles/speed.html": {
    "href": "articles/speed.html",
    "title": "Speed Comparison with Activator from Latest Build | FastActivator API Reference",
    "keywords": "Speed Comparison with Activator from Latest Build BenchmarkDotNet v0.13.12, Ubuntu 22.04.4 LTS (Jammy Jellyfish) AMD EPYC 7763, 1 CPU, 4 logical and 2 physical cores .NET SDK 8.0.204 [Host] : .NET 8.0.4 (8.0.424.16909), X64 RyuJIT AVX2 DefaultJob : .NET 8.0.4 (8.0.424.16909), X64 RyuJIT AVX2 Method Mean Error StdDev Rank Gen0 Allocated ActivatorCreateInstance 276.67 ns 4.350 ns 4.069 ns 2 0.0038 336 B FastActivatorCreateInstance 36.64 ns 0.155 ns 0.138 ns 1 0.0011 96 B"
  },
  "index.html": {
    "href": "index.html",
    "title": "FastActivator | FastActivator API Reference",
    "keywords": "FastActivator FastActivator is a C# library that provides a faster alternative to the System.Activator class for creating instances of classes. Purpose The purpose of FastActivator is to replace the usage of System.Activator with a more efficient implementation, resulting in improved performance when creating instances of classes. Speed Comparisons Method Mean Error StdDev Rank Gen0 Allocated ActivatorCreateInstance 182.80 ns 1.272 ns 1.127 ns 2 0.0401 336 B FastActivatorCreateInstance 28.27 ns 0.422 ns 0.352 ns 1 0.0115 96 B In many instances it's about 2x to 10x faster depending on the method used. Usage To use FastActivator, follow these steps: Add a reference to the FastActivator library in your project. dotnet add package Fast.Activator Import the required namespaces: using Fast.Activator; To create an instance of a class using FastActivator, use one of the following methods: CreateInstance<TClass>(params object[] args): Creates an instance of the specified class TClass with the provided arguments, if any. var instance = FastActivator.CreateInstance<MyClass>(arg1, arg2); CreateInstance<TClass>(): Creates an instance of the specified class TClass without any arguments. var instance = FastActivator.CreateInstance<MyClass>(); CreateInstance(Type type, params object[] args): Creates an instance of the specified Type with the provided arguments, if any. var instance = FastActivator.CreateInstance(typeof(MyClass), arg1, arg2); CreateInstance(Type type): Creates an instance of the specified Type without any arguments. var instance = FastActivator.CreateInstance(typeof(MyClass)); Note: If the object cannot be created, the methods will return null. Contributing Contributions to FastActivator are welcome! If you would like to contribute, please follow these guidelines: Fork the repository and create a new branch for your feature or bug fix. Make your changes and ensure that the tests pass. Submit a pull request describing your changes and the problem they solve. Ensure that your code adheres to the project's coding conventions and style guidelines. License FastActivator is released under the Apache 2.0 License."
  }
}
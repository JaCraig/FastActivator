{
  "api/Fast.Activator.FastActivator.html": {
    "href": "api/Fast.Activator.FastActivator.html",
    "title": "Class FastActivator | FastActivator API Reference",
    "keywords": "Class FastActivator Fast activator static class Inheritance object FastActivator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Fast.Activator Assembly: Fast.Activator.dll Syntax public static class FastActivator Methods | Edit this page View Source CreateInstance(Type) Creates an instance. Declaration public static object CreateInstance(Type type) Parameters Type Name Description Type type The type. Returns Type Description object The object if it can be created, null otherwise. | Edit this page View Source CreateInstance(Type, params object[]) Creates an instance. Declaration public static object CreateInstance(Type type, params object[] args) Parameters Type Name Description Type type The type. object[] args The arguments. Returns Type Description object The object if it can be created, null otherwise. | Edit this page View Source CreateInstance<TClass>() Creates an instance of the class. Declaration public static TClass CreateInstance<TClass>() Returns Type Description TClass The instance created. Type Parameters Name Description TClass The type of the class. | Edit this page View Source CreateInstance<TClass>(params object[]) Creates an instance of the class. Declaration public static TClass CreateInstance<TClass>(params object[] args) Parameters Type Name Description object[] args The arguments. Returns Type Description TClass The instance created. Type Parameters Name Description TClass The type of the class."
  },
  "api/Fast.Activator.Utils.Constructor.html": {
    "href": "api/Fast.Activator.Utils.Constructor.html",
    "title": "Class Constructor | FastActivator API Reference",
    "keywords": "Class Constructor Constructor Inheritance object Constructor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Fast.Activator.Utils Assembly: Fast.Activator.dll Syntax public class Constructor Constructors | Edit this page View Source Constructor(ConstructorDelegate) Initializes a new instance of the Constructor class. Declaration public Constructor(ConstructorDelegate @delegate) Parameters Type Name Description ConstructorDelegate delegate The delegate. | Edit this page View Source Constructor(ConstructorInfo, ParameterInfo[]) Initializes a new instance of the Constructor class. Declaration public Constructor(ConstructorInfo constructor, ParameterInfo[] parameters) Parameters Type Name Description ConstructorInfo constructor The constructor. ParameterInfo[] parameters The parameters. Exceptions Type Condition ArgumentNullException constructor Properties | Edit this page View Source ParameterLength Gets the size of the parameter. Declaration public int ParameterLength { get; } Property Value Type Description int The size of the parameter. Methods | Edit this page View Source CreateInstance(object[]) Create an instance. Declaration public object CreateInstance(object[] args) Parameters Type Name Description object[] args The arguments. Returns Type Description object The new object | Edit this page View Source IsMatch(object[]) Determines whether the specified arguments is a match. Declaration public bool IsMatch(object[] args) Parameters Type Name Description object[] args The arguments. Returns Type Description bool true if the specified arguments is a match; otherwise, false."
  },
  "api/Fast.Activator.Utils.ConstructorDelegate.html": {
    "href": "api/Fast.Activator.Utils.ConstructorDelegate.html",
    "title": "Delegate ConstructorDelegate | FastActivator API Reference",
    "keywords": "Delegate ConstructorDelegate Constructor delegate Namespace: Fast.Activator.Utils Assembly: Fast.Activator.dll Syntax public delegate object ConstructorDelegate(params object[] args) Parameters Type Name Description object[] args The arguments. Returns Type Description object The object"
  },
  "api/Fast.Activator.Utils.ConstructorList.html": {
    "href": "api/Fast.Activator.Utils.ConstructorList.html",
    "title": "Class ConstructorList | FastActivator API Reference",
    "keywords": "Class ConstructorList Constructor list Inheritance object ConstructorList Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Fast.Activator.Utils Assembly: Fast.Activator.dll Syntax public class ConstructorList Constructors | Edit this page View Source ConstructorList(Type, int) Initializes a new instance of the ConstructorList class. Declaration public ConstructorList(Type type, int hashCode) Parameters Type Name Description Type type The type. int hashCode The hash code. Methods | Edit this page View Source CreateInstance() Creates an instance. Declaration public object CreateInstance() Returns Type Description object The instance created. | Edit this page View Source CreateInstance(object[]) Creates an instance. Declaration public object CreateInstance(object[] args) Parameters Type Name Description object[] args The arguments. Returns Type Description object The instance created."
  },
  "api/Fast.Activator.Utils.html": {
    "href": "api/Fast.Activator.Utils.html",
    "title": "Namespace Fast.Activator.Utils | FastActivator API Reference",
    "keywords": "Namespace Fast.Activator.Utils Classes Constructor Constructor ConstructorList Constructor list Delegates ConstructorDelegate Constructor delegate"
  },
  "api/Fast.Activator.html": {
    "href": "api/Fast.Activator.html",
    "title": "Namespace Fast.Activator | FastActivator API Reference",
    "keywords": "Namespace Fast.Activator Classes FastActivator Fast activator static class"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | FastActivator API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | FastActivator API Reference",
    "keywords": "Code namespace FastActivator.Example { /// <summary> /// Test class used to demonstrate FastActivator /// </summary> public class TestClass { /// <summary> /// Initializes a new instance of the <see cref=\"TestClass\"/> class. /// </summary> public TestClass() { System.Console.WriteLine(\"I was created\"); } /// <summary> /// Initializes a new instance of the <see cref=\"TestClass\"/> class. /// </summary> /// <param name=\"test\">The test string.</param> public TestClass(string test) { System.Console.WriteLine(\"I was created with a string: {0}\", test); } } /// <summary> /// Main program /// </summary> internal static class Program { /// <summary> /// Defines the entry point of the application. /// </summary> /// <param name=\"args\">The arguments.</param> private static void Main(string[] args) { // Create an object using the default constructor var MyObject = Fast.Activator.FastActivator.CreateInstance<TestClass>(); // Create an object using the constructor with a string parameter var MyObject2 = Fast.Activator.FastActivator.CreateInstance<TestClass>(\"Hello World\"); } } } Output I was created I was created with a string: Hello World"
  },
  "index.html": {
    "href": "index.html",
    "title": "FastActivator | FastActivator API Reference",
    "keywords": "FastActivator FastActivator is a C# library that provides a faster alternative to the System.Activator class for creating instances of classes. Purpose The purpose of FastActivator is to replace the usage of System.Activator with a more efficient implementation, resulting in improved performance when creating instances of classes. Speed Comparisons Method Mean Error StdDev Ratio Rank Gen 0 Gen 1 Gen 2 Allocated ActivatorCreateInstance 509.96 ns 7.513 ns 6.660 ns 1.00 2 0.0744 - - 472 B FastActivatorCreateInstance 47.37 ns 0.935 ns 0.829 ns 0.09 1 0.0153 - - 96 B In many instances it's about 2x to 10x faster depending on the method used. Usage To use FastActivator, follow these steps: Add a reference to the FastActivator library in your project. dotnet add package Fast.Activator Import the required namespaces: using Fast.Activator; To create an instance of a class using FastActivator, use one of the following methods: CreateInstance<TClass>(params object[] args): Creates an instance of the specified class TClass with the provided arguments, if any. var instance = FastActivator.CreateInstance<MyClass>(arg1, arg2); CreateInstance<TClass>(): Creates an instance of the specified class TClass without any arguments. var instance = FastActivator.CreateInstance<MyClass>(); CreateInstance(Type type, params object[] args): Creates an instance of the specified Type with the provided arguments, if any. var instance = FastActivator.CreateInstance(typeof(MyClass), arg1, arg2); CreateInstance(Type type): Creates an instance of the specified Type without any arguments. var instance = FastActivator.CreateInstance(typeof(MyClass)); Note: If the object cannot be created, the methods will return null. Contributing Contributions to FastActivator are welcome! If you would like to contribute, please follow these guidelines: Fork the repository and create a new branch for your feature or bug fix. Make your changes and ensure that the tests pass. Submit a pull request describing your changes and the problem they solve. Ensure that your code adheres to the project's coding conventions and style guidelines. License FastActivator is released under the Apache 2.0 License."
  }
}